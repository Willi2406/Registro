@page "/Jugadores/Index"
@inject NavigationManager Navigation
@inject JugadoresServices jugadoresServices
@rendermode InteractiveServer

<PageTitle>Registro de Jugadores</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title m-0">Consulta de Jugadores</h5>
            <a href="/Jugadores/Create" class="btn btn-primary">
                <span class="bi bi-plus-square"></span> Crear
            </a>
        </div>

        <div class="card-body">
            <div class="row g-3 align-items-end">
                <div class="col-3">
                    <label class="form-label"><strong>Filtrar por</strong></label>
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Elija una opción</option>
                        <option value="Nombres">Nombres</option>
                        <option value="JugadorId">ID</option>
                    </InputSelect>
                </div>

                <div class="col-5">
                    <label class="form-label"><strong>Búsqueda</strong></label>
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" @bind:event="oninput" placeholder="Buscar..." />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                        <button type="button" class="btn btn-outline-secondary" title="Limpiar" @onclick="Limpiar">
                            <span class="bi bi-eraser"></span>
                        </button>
                    </div>
                </div>

            </div>

            <div class="table-responsive mt-3">
                <table class="table table-hover">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th>JugadorId</th>
                            <th>Nombres</th>
                            <th>Victorias</th>
                            <th>Derrotas</th>
                            <th>Empates</th>
                            <th>Total</th>
                            <th>Opciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var j in ListaJugadores)
                        {
                            var total = j.Victorias + j.Derrotas + j.Empate;
                            <tr>
                                <td>@j.JugadorId</td>
                                <td>@j.Nombres</td>
                                <td>@j.Victorias</td>
                                <td>@j.Derrotas</td>
                               <td>@j.Empate</td>
                                <td>@total</td>
                                <td class="text-center">
                                    <a href="/Jugador/Edit/@j.JugadorId" class="btn btn-outline-primary bi bi-pencil-square" title="Editar"></a>
                                    <a href="/Jugador/Delete/@j.JugadorId" class="btn btn-outline-danger bi bi-trash" title="Eliminar"></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="card-footer d-flex justify-content-between">
            <label>Cantidad: @ListaJugadores.Count()</label>
            <div class="d-flex gap-3">
                <label>Total Victorias: @ListaJugadores.Sum(x => x.Victorias)</label>
                <label>Total Derrotas: @ListaJugadores.Sum(x => x.Derrotas)</label>
                <label>Total Empates: @ListaJugadores.Sum(x => x.Empate)</label>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Jugadores> ListaJugadores { get; set; } = new();

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaJugadores = await jugadoresServices.Listar(j => j.JugadorId > 0);
    }

    private async Task Buscar()
    {
        if (!string.IsNullOrWhiteSpace(ValorFiltro) && Filtro == "Nombres")
        {
            var v = ValorFiltro.ToLower();
            ListaJugadores = await jugadoresServices.Listar(j => j.Nombres.ToLower().Contains(v));
        }
        else if (!string.IsNullOrWhiteSpace(ValorFiltro) && Filtro == "JugadorId")
        {
            if (int.TryParse(ValorFiltro, out var id))
            {
                ListaJugadores = await jugadoresServices.Listar(j => j.JugadorId == id);
            }
        }
        else
        {
            ListaJugadores = await jugadoresServices.Listar(j => j.JugadorId > 0);
        }
    }

    private async Task Limpiar()
    {
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
        ListaJugadores = await jugadoresServices.Listar(j => j.JugadorId > 0);
    }

}
