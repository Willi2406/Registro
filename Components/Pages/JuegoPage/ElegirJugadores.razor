@page "/"
@rendermode InteractiveServer

@using Registro.Models
@inject Registro.Services.JugadoresServices jugadoresServices
@inject Registro.Services.PartidasServices partidasServices
@inject NavigationManager Nav
@inject IJSRuntime JS

<PageTitle>TicTacToe</PageTitle>

<div class="container mx-auto max-w-4xl p-6 bg-white rounded-lg shadow-xl">
    <h1 class="text-center mb-4">TicTacToe</h1>

    <!-- Crear nueva partida -->
    <div class="mb-4 p-3 border rounded">
        <h4 class="mb-3">Crear nueva partida</h4>
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label d-flex align-items-center gap-2">
                    <span class="badge bg-primary">X</span>
                    <strong>Jugador X (azul oscuro)</strong>
                </label>
                <InputSelect class="form-select" @bind-Value="JugadorXId">
                    <option value="0" selected disabled>Seleccione jugador para X</option>
                    @foreach (var j in Jugadores)
                    {
                        <option value="@j.JugadorId">@j.Nombres</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-6">
                <label class="form-label d-flex align-items-center gap-2">
                    <span class="badge bg-info text-dark">O</span>
                    <strong>Jugador O (azul claro)</strong>
                </label>
                <InputSelect class="form-select" @bind-Value="JugadorOId">
                    <option value="0" selected disabled>Seleccione jugador para O</option>
                    @foreach (var j in Jugadores)
                    {
                        <option value="@j.JugadorId" disabled="@(j.JugadorId == JugadorXId)">
                            @j.Nombres @(j.JugadorId == JugadorXId ? "(seleccionado como X)" : "")
                        </option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="mt-3">
            <button class="btn btn-success"
                    disabled="@(JugadorXId <= 0 || JugadorOId <= 0)"
                    @onclick="StartGameAsync">
                Iniciar Partida (En Curso)
            </button>
        </div>
    </div>

    <!-- Listado: En curso -->
    <h4 class="mb-2">Partidas en curso</h4>
    @if (enCurso is null)
    {
        <p>Cargando...</p>
    }
    else if (enCurso.Count == 0)
    {
        <div class="alert alert-info">No hay partidas en curso.</div>
    }
    else
    {
        <div class="table-responsive mb-4">
            <table class="table table-hover align-middle">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>X</th>
                        <th>O</th>
                        <th>Turno</th>
                        <th>Inicio</th>
                        <th class="text-end">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in enCurso)
                    {
                        <tr>
                            <td>@p.PartidaId</td>
                            <td>@p.Jugador1?.Nombres</td>
                            <td>@(p.Jugador2?.Nombres ?? "-")</td>
                            <td>@(p.TurnoJugador?.Nombres ?? "-")</td>
                            <td>@p.FechaInicio.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                            <td class="text-end">
                                <a class="btn btn-success" href="/Juego?partidaId=@p.PartidaId">Abrir / Jugar</a>
                                <a class="btn btn-outline-primary ms-2" href="/Partida/Edit/@p.PartidaId" title="Editar">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Jugadores> Jugadores = new();
    private int JugadorXId = 0;
    private int JugadorOId = 0;

    private List<Partidas>? enCurso;
    private List<Partidas>? pendientes;

    protected override async Task OnInitializedAsync()
    {
        // Cargar selectores
        Jugadores = await jugadoresServices.Listar(j => j.JugadorId > 0);

        // Permitir varias partidas en curso a la vez (acepta "En Curso" y "EnCurso")
        enCurso = await partidasServices.Listar(p =>
            p.EstadoPartida == "En Curso" || p.EstadoPartida == "EnCurso");

        // Pendientes
        pendientes = await partidasServices.Listar(p => p.EstadoPartida == "Pendiente");
    }

    private async Task StartGameAsync()
    {
        if (JugadorXId <= 0 || JugadorOId <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Debes seleccionar ambos jugadores.");
            return;
        }
        if (JugadorXId == JugadorOId)
        {
            await JS.InvokeVoidAsync("alert", "No puedes seleccionar el mismo jugador para X y O.");
            return;
        }

        var partida = new Partidas
        {
            Jugador1Id = JugadorXId,      
            Jugador2Id = JugadorOId,      
            EstadoPartida = "En Curso",   
            EstadoTablero = "---------",  
            TurnoJugadorId = JugadorXId,   
            FechaInicio = DateTime.UtcNow
        };

        var ok = await partidasServices.Guardar(partida);
        if (!ok)
        {
            await JS.InvokeVoidAsync("alert", "Error al crear la partida.");
            return;
        }

        Nav.NavigateTo($"/Juego?partidaId={partida.PartidaId}");
    }
}
