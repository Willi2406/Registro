@page "/Partidas/Create"
@using Registro.Models
@inject NavigationManager Navigation
@inject Registro.Services.PartidasServices partidasServices
@inject Registro.Services.JugadoresServices jugadoresServices
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Crear Partida</PageTitle>

<EditForm Model="@Partida" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Partida</h5>
            </div>

            <div class="card-body">
                <!-- Jugador 1 -->
                <div class="mb-3">
                    <label class="form-label"><strong>Jugador 1</strong></label>
                    <InputSelect class="form-select" @bind-Value="Partida.Jugador1Id">
                        <option value="0" selected disabled>Seleccione el Jugador 1</option>
                        @foreach (var j in Jugadores)
                        {
                            <option value="@j.JugadorId">@j.JugadorId - @j.Nombres</option>
                        }
                    </InputSelect>
                </div>

                <!-- Jugador 2 -->
                <div class="mb-3">
                    <label class="form-label"><strong>Jugador 2 (opcional)</strong></label>
                    <InputSelect class="form-select" @bind-Value="Partida.Jugador2Id">
                        <option value="">Sin oponente por ahora</option>
                        @foreach (var j in Jugadores)
                        {
                            <option value="@j.JugadorId">@j.JugadorId - @j.Nombres</option>
                        }
                    </InputSelect>
                </div>

                <!-- Estado Partida -->
                <div class="mb-3">
                    <label class="form-label"><strong>Estado</strong></label>
                    <InputSelect class="form-select" @bind-Value="Partida.EstadoPartida">
                        @foreach (var e in EstadosPermitidos)
                        {
                            <option value="@e">@e</option>
                        }
                    </InputSelect>
                </div>

                <!-- Fechas -->
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label"><strong>Fecha Inicio</strong></label>
                        <input class="form-control" value="@Partida.FechaInicio.ToLocalTime().ToString("yyyy-MM-dd HH:mm")" readonly />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label"><strong>Fecha Fin</strong></label>
                        <input class="form-control" value="-" readonly />
                    </div>
                </div>
            </div>

            <div class="card-footer text-center mt-2">
                <a href="/Partidas/Index" class="btn btn-secondary">
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="submit" class="btn btn-primary bi bi-floppy">
                    Guardar
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private Partidas Partida { get; set; } = new()
    {
        EstadoPartida = "EnCurso",
        FechaInicio = DateTime.UtcNow
    };

    private List<Jugadores> Jugadores { get; set; } = new();
    private readonly string[] EstadosPermitidos = new[] { "EnCurso", "Pendiente", "Finalizada" };

    protected override async Task OnInitializedAsync()
    {
        Jugadores = await jugadoresServices.Listar(j => j.JugadorId > 0);
        Partida.TurnoJugadorId = Partida.Jugador1Id;
    }

    private async Task Guardar()
    {
        // -------- Validaciones con JS (alert/confirm) ----------
        if (Partida.Jugador1Id <= 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Debe seleccionar el Jugador 1.");
            return;
        }

        if (!await jugadoresServices.Existe(Partida.Jugador1Id))
        {
            await JSRuntime.InvokeVoidAsync("alert", "El Jugador 1 no existe.");
            return;
        }

        if (Partida.Jugador2Id.HasValue)
        {
            if (Partida.Jugador2Id.Value == Partida.Jugador1Id)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Jugador 2 no puede ser el mismo que Jugador 1.");
                return;
            }

            if (!await jugadoresServices.Existe(Partida.Jugador2Id.Value))
            {
                await JSRuntime.InvokeVoidAsync("alert", "El Jugador 2 no existe.");
                return;
            }
        }

        if (string.IsNullOrWhiteSpace(Partida.EstadoPartida))
            Partida.EstadoPartida = "EnCurso";

        if (!EstadosPermitidos.Contains(Partida.EstadoPartida))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Estado de partida no permitido.");
            return;
        }

        if (Partida.TurnoJugadorId == 0)
            Partida.TurnoJugadorId = Partida.Jugador1Id;

        // Confirmación antes de guardar
        bool confirmado = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            "¿Está seguro que desea crear esta partida?");

        if (!confirmado) return;

        var ok = await partidasServices.Guardar(Partida);
        if (ok)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Partida creada correctamente.");
            Navigation.NavigateTo("/Partidas/Index");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "No se pudo guardar la partida.");
        }
    }
}

