@page "/Partidas/Create"
@using Registro.Models
@inject NavigationManager Navigation
@inject Registro.Services.PartidasServices partidasServices
@inject Registro.Services.JugadoresServices jugadoresServices
@rendermode InteractiveServer

<PageTitle>Crear Partida</PageTitle>

<EditForm Model="@Partida" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Partida</h5>
            </div>

            <div class="card-body">
                <!-- Jugador 1 -->
                <div class="mb-3">
                    <label class="form-label"><strong>Jugador 1</strong></label>
                    <InputSelect class="form-select" @bind-Value="Partida.Jugador1Id">
                        <option value="0" selected disabled>Seleccione el Jugador 1</option>
                        @foreach (var j in Jugadores)
                        {
                            <option value="@j.JugadorId">@j.JugadorId - @j.Nombres</option>
                        }
                    </InputSelect>
                    @if (!string.IsNullOrEmpty(ErrorJugador1))
                    {
                        <div class="text-danger mt-1">@ErrorJugador1</div>
                    }
                </div>

                <!-- Jugador 2 -->
                <div class="mb-3">
                    <label class="form-label"><strong>Jugador 2 (opcional)</strong></label>
                    <InputSelect class="form-select" @bind-Value="Partida.Jugador2Id">
                        <option value=""> Sin oponente por ahora </option>
                        @foreach (var j in Jugadores)
                        {
                            <option value="@j.JugadorId">@j.JugadorId - @j.Nombres</option>
                        }
                    </InputSelect>
                    @if (!string.IsNullOrEmpty(ErrorJugador2))
                    {
                        <div class="text-danger mt-1">@ErrorJugador2</div>
                    }
                </div>

                <!-- Estado Partida -->
                <div class="mb-3">
                    <label class="form-label"><strong>Estado</strong></label>
                    <InputSelect class="form-select" @bind-Value="Partida.EstadoPartida">
                        @foreach (var e in EstadosPermitidos)
                        {
                            <option value="@e">@e</option>
                        }
                    </InputSelect>
                </div>

                <!-- Estado del Tablero -->
                <div class="mb-3">
                    <label class="form-label"><strong>Estado del Tablero</strong></label>
                    <InputText class="form-control" @bind-Value="Partida.EstadoTablero" maxlength="9" />
                    <div class="form-text">Formato simple: 9 posiciones (ej. "---------").</div>
                </div>

                <!-- Fechas -->
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label"><strong>Fecha Inicio</strong></label>
                        <input class="form-control" value="@Partida.FechaInicio.ToLocalTime().ToString("yyyy-MM-dd HH:mm")" readonly />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label"><strong>Fecha Fin</strong></label>
                        <input class="form-control" value="-" readonly />
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(ErrorGeneral))
                {
                    <div class="alert alert-danger mt-2">@ErrorGeneral</div>
                }
            </div>

            <div class="card-footer text-center mt-2">
                <a href="/Partidas/Index" class="btn btn-secondary">
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="submit" class="btn btn-primary bi bi-floppy">
                    Guardar
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private Partidas Partida { get; set; } = new()
    {
        EstadoPartida = "EnCurso",
        EstadoTablero = "---------",
        FechaInicio = DateTime.UtcNow
    };

    private List<Jugadores> Jugadores { get; set; } = new();
    private readonly string[] EstadosPermitidos = new[] { "EnCurso", "Pendiente", "Finalizada" };

    private string ErrorJugador1 { get; set; } = string.Empty;
    private string ErrorJugador2 { get; set; } = string.Empty;
    private string ErrorGeneral { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Jugadores = await jugadoresServices.Listar(j => j.JugadorId > 0);
        Partida.TurnoJugadorId = Partida.Jugador1Id;
    }

    private async Task Guardar()
    {
        ErrorJugador1 = ErrorJugador2 = ErrorGeneral = string.Empty;

        if (Partida.Jugador1Id <= 0)
        {
            ErrorJugador1 = "Debe seleccionar el Jugador 1.";
            return;
        }

        var existeJ1 = await jugadoresServices.Existe(Partida.Jugador1Id);
        if (!existeJ1)
        {
            ErrorJugador1 = "El Jugador 1 no existe.";
            return;
        }

        if (Partida.Jugador2Id.HasValue)
        {
            if (Partida.Jugador2Id.Value == Partida.Jugador1Id)
            {
                ErrorJugador2 = "Jugador 2 no puede ser el mismo que Jugador 1.";
                return;
            }

            var existeJ2 = await jugadoresServices.Existe(Partida.Jugador2Id.Value);
            if (!existeJ2)
            {
                ErrorJugador2 = "El Jugador 2 no existe.";
                return;
            }
        }

        if (string.IsNullOrWhiteSpace(Partida.EstadoPartida))
            Partida.EstadoPartida = "EnCurso";

        if (!EstadosPermitidos.Contains(Partida.EstadoPartida))
        {
            ErrorGeneral = "Estado de partida no permitido.";
            return;
        }

        if (string.IsNullOrWhiteSpace(Partida.EstadoTablero))
            Partida.EstadoTablero = "---------";

        if (Partida.TurnoJugadorId == 0)
            Partida.TurnoJugadorId = Partida.Jugador1Id;

        var ok = await partidasServices.Guardar(Partida);
        if (ok)
        {
            Navigation.NavigateTo("/Partidas/Index");
        }
        else
        {
            ErrorGeneral = "No se pudo guardar la partida.";
        }
    }

    private void OnChangeJugador1(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out var j1))
        {
            Partida.Jugador1Id = j1;
            Partida.TurnoJugadorId = j1;
        }
    }
}
