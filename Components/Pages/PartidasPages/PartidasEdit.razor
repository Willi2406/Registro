@page "/Partida/Edit/{PartidaId:int}"
@using Registro.Models
@inject Registro.Services.PartidasServices partidasServices
@inject Registro.Services.JugadoresServices jugadoresServices
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Modificar Partida</PageTitle>

@if (cargando)
{
    <div class="container">
        <div class="alert alert-info">Cargando...</div>
    </div>
}
else if (Partida is null)
{
    <div class="container">
        <div class="alert alert-danger">No se encontró la partida.</div>
    </div>
}
else
{
    <EditForm Model="@Partida" OnValidSubmit="Modificar">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="container">
            <div class="card shadow-lg">
                <div class="card-header text-center">
                    <h5 class="card-title">Modificar Partida</h5>
                </div>

                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label"><strong>PartidaId</strong></label>
                        <InputNumber class="form-control" @bind-Value="Partida.PartidaId" disabled />
                    </div>

                    <div class="mb-3">
                        <label class="form-label"><strong>Jugador 1</strong></label>
                        <InputSelect class="form-select" @bind-Value="Partida.Jugador1Id">
                            <option value="0" disabled>Seleccione el Jugador 1</option>
                            @foreach (var j in Jugadores)
                            {
                                <option value="@j.JugadorId">@j.JugadorId - @j.Nombres</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label"><strong>Jugador 2 (opcional)</strong></label>
                        <InputSelect class="form-select" @bind-Value="Partida.Jugador2Id">
                            <option value="">— Sin oponente —</option>
                            @foreach (var j in Jugadores)
                            {
                                <option value="@j.JugadorId">@j.JugadorId - @j.Nombres</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label"><strong>Estado</strong></label>
                        <InputSelect class="form-select" @bind-Value="Partida.EstadoPartida">
                            @foreach (var e in EstadosPermitidos)
                            {
                                <option value="@e">@e</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label"><strong>Estado del Tablero</strong></label>
                        <InputText class="form-control" @bind-Value="Partida.EstadoTablero" maxlength="9" />
                        <div class="form-text">9 posiciones</div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label"><strong>Fecha Inicio</strong></label>
                            <input class="form-control" value="@Partida.FechaInicio.ToLocalTime().ToString("yyyy-MM-dd HH:mm")" readonly />
                        </div>

                        <div class="col-md-6 mb-3">
                            <label class="form-label"><strong>Fecha Fin</strong></label>
                            <input class="form-control" value="@(Partida.FechaFin.HasValue? Partida.FechaFin.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm") : "-")" readonly />
                            <button type="button" class="btn btn-outline-success mt-2" @onclick="MarcarFinalizadaAhora">
                                <span class="bi bi-flag"></span> Marcar Finalizada ahora
                            </button>
                        </div>
                    </div>
                </div>

                <div class="card-footer d-flex justify-content-between align-items-center">
                    <a href="/Partidas/Index" class="btn btn-secondary">
                        <span class="bi bi-arrow-left"></span> Volver
                    </a>
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="Eliminar">
                            Eliminar
                        </button>
                        <button type="submit" class="btn btn-primary bi bi-floppy">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int PartidaId { get; set; }
    private Partidas? Partida { get; set; }
    private List<Jugadores> Jugadores { get; set; } = new();
    private readonly string[] EstadosPermitidos = new[] { "EnCurso", "Finalizada" };
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task Cargar()
    {
        cargando = true;
        Jugadores = await jugadoresServices.Listar(j => j.JugadorId > 0);
        Partida = await partidasServices.Buscar(PartidaId);
        cargando = false;
    }

    private async Task Modificar()
    {
        if (Partida is null) return;

        // -------- Validaciones con JS --------
        if (Partida.Jugador1Id <= 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Debe seleccionar el Jugador 1.");
            return;
        }

        if (!(await ExisteJugador(Partida.Jugador1Id)))
        {
            await JSRuntime.InvokeVoidAsync("alert", "El Jugador 1 no existe.");
            return;
        }

        if (Partida.Jugador2Id.HasValue)
        {
            if (Partida.Jugador2Id.Value == Partida.Jugador1Id)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Jugador 2 no puede ser el mismo que Jugador 1.");
                return;
            }

            if (!(await ExisteJugador(Partida.Jugador2Id.Value)))
            {
                await JSRuntime.InvokeVoidAsync("alert", "El Jugador 2 no existe.");
                return;
            }
        }

        if (!EstadosPermitidos.Contains(Partida.EstadoPartida ?? string.Empty))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Estado de partida no permitido.");
            return;
        }

        if (string.IsNullOrWhiteSpace(Partida.EstadoTablero))
            Partida.EstadoTablero = "---------";

        // Si se marca Finalizada sin FechaFin, se coloca ahora
        if (string.Equals(Partida.EstadoPartida, "Finalizada", StringComparison.OrdinalIgnoreCase) && !Partida.FechaFin.HasValue)
            Partida.FechaFin = DateTime.UtcNow;

        // Confirmar guardado
        var confirmSave = await JSRuntime.InvokeAsync<bool>("confirm", "¿Desea guardar los cambios de esta partida?");
        if (!confirmSave) return;

        // -------- Guardar --------
        var ok = await partidasServices.Guardar(Partida);
        if (!ok)
        {
            await JSRuntime.InvokeVoidAsync("alert", "No se pudo guardar la partida.");
            return;
        }

        // Ajustar estadísticas si quedó Finalizada
        if (string.Equals(Partida.EstadoPartida, "Finalizada", StringComparison.OrdinalIgnoreCase))
        {
            if (!Partida.GanadorId.HasValue)
            {
                if (Partida.Jugador1Id > 0 && Partida.Jugador2Id.HasValue)
                    await jugadoresServices.RegistrarEmpate(Partida.Jugador1Id, Partida.Jugador2Id.Value);
            }
            else
            {
                var ganador = Partida.GanadorId.Value;
                int? perdedor = null;

                if (Partida.Jugador2Id.HasValue)
                    perdedor = (ganador == Partida.Jugador1Id) ? Partida.Jugador2Id.Value : Partida.Jugador1Id;

                if (perdedor.HasValue)
                    await jugadoresServices.RegistrarVictoria(ganador, perdedor.Value);
            }
        }

        await JSRuntime.InvokeVoidAsync("alert", "Partida guardada correctamente.");
        Navigation.NavigateTo("/Partidas/Index");
    }

    private void MarcarFinalizadaAhora()
    {
        if (Partida is null) return;
        Partida.EstadoPartida = "Finalizada";
        Partida.FechaFin = DateTime.UtcNow;
    }

    private async Task Eliminar()
    {
        if (Partida is null) return;

        var confirmado = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            "¿Está seguro que desea eliminar esta partida? Esta acción no se puede deshacer."
        );

        if (!confirmado) return;

        var ok = await partidasServices.Eliminar(Partida.PartidaId);
        if (ok)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Partida eliminada.");
            Navigation.NavigateTo("/Partidas/Index");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "No se pudo eliminar la partida.");
        }
    }

    private async Task<bool> ExisteJugador(int jugadorId)
        => (await jugadoresServices.Listar(j => j.JugadorId == jugadorId)).Any();
}
